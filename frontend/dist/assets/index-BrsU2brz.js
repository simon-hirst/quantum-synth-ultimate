const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/style-DI8cvZFY.css"])))=>i.map(i=>d[i]);
(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))e(n);new MutationObserver(n=>{for(const o of n)if(o.type==="childList")for(const a of o.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&e(a)}).observe(document,{childList:!0,subtree:!0});function i(n){const o={};return n.integrity&&(o.integrity=n.integrity),n.referrerPolicy&&(o.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?o.credentials="include":n.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function e(n){if(n.ep)return;n.ep=!0;const o=i(n);fetch(n.href,o)}})();const f="modulepreload",p=function(s){return"/"+s},u={},S=function(t,i,e){let n=Promise.resolve();if(i&&i.length>0){document.getElementsByTagName("link");const a=document.querySelector("meta[property=csp-nonce]"),r=(a==null?void 0:a.nonce)||(a==null?void 0:a.getAttribute("nonce"));n=Promise.allSettled(i.map(l=>{if(l=p(l),l in u)return;u[l]=!0;const c=l.endsWith(".css"),h=c?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${l}"]${h}`))return;const d=document.createElement("link");if(d.rel=c?"stylesheet":f,c||(d.as="script"),d.crossOrigin="",d.href=l,r&&d.setAttribute("nonce",r),document.head.appendChild(d),c)return new Promise((m,g)=>{d.addEventListener("load",m),d.addEventListener("error",()=>g(new Error(`Unable to preload CSS for ${l}`)))})}))}function o(a){const r=new Event("vite:preloadError",{cancelable:!0});if(r.payload=a,window.dispatchEvent(r),!r.defaultPrevented)throw a}return n.then(a=>{for(const r of a||[])r.status==="rejected"&&o(r.reason);return t().catch(o)})};class y{constructor(){this.container=document.createElement("div"),this.container.style.position="fixed",this.container.style.top="20px",this.container.style.left="20px",this.container.style.zIndex="1000",this.container.style.fontFamily="Arial, sans-serif",this.container.style.color="white",this.container.style.backgroundColor="rgba(0, 0, 0, 0.7)",this.container.style.padding="15px",this.container.style.borderRadius="10px",this.container.style.backdropFilter="blur(10px)",this.container.style.maxWidth="300px",this.statusElement=document.createElement("div"),this.statusElement.innerHTML=`
            <h2 style="margin: 0 0 10px 0;">QuantumSynth Neural Edition</h2>
            <div id="status">Ready to start screen sharing</div>
            <div id="connection">Status: Waiting for user action</div>
            <div id="fps">FPS: 0</div>
            <div style="margin-top: 10px; font-size: 12px; color: #ccc;">
                <p>For best results:</p>
                <ul style="margin: 5px 0; padding-left: 15px;">
                    <li>Share your entire screen</li>
                    <li>Enable "Share audio" option</li>
                    <li>Use Chrome or Edge for best compatibility</li>
                </ul>
            </div>
        `,this.controlsElement=document.createElement("div"),this.controlsElement.style.marginTop="15px",this.controlsElement.innerHTML=`
            <button id="screenshareBtn" style="padding: 10px 16px; margin-right: 10px; background: #4ecdc4; border: none; border-radius: 5px; color: white; cursor: pointer; font-weight: bold;">
                Start Screen Sharing
            </button>
            <button id="demoBtn" style="padding: 8px 16px; background: #ff6b6b; border: none; border-radius: 5px; color: white; cursor: pointer;">
                Demo Mode
            </button>
        `,this.container.appendChild(this.statusElement),this.container.appendChild(this.controlsElement),document.body.appendChild(this.container),this.screenshareBtn=document.getElementById("screenshareBtn"),this.setupEventListeners()}setupEventListeners(){var t;this.screenshareBtn.addEventListener("click",()=>{window.dispatchEvent(new CustomEvent("startScreenshare"))}),(t=document.getElementById("demoBtn"))==null||t.addEventListener("click",()=>{window.dispatchEvent(new CustomEvent("demoMode"))})}updateStatus(t){const i=document.getElementById("status");i&&(i.textContent=t)}updateConnectionStatus(t,i){const e=document.getElementById("connection");e&&(e.textContent=i||`Status: ${t?"Connected":"Disconnected"}`)}updateFPS(t){const i=document.getElementById("fps");i&&(i.textContent=`FPS: ${t.toFixed(1)}`)}showNotification(t,i=3e3){const e=document.createElement("div");e.textContent=t,e.style.position="fixed",e.style.top="80px",e.style.left="50%",e.style.transform="translateX(-50%)",e.style.backgroundColor="rgba(0, 0, 0, 0.8)",e.style.color="white",e.style.padding="10px 20px",e.style.borderRadius="5px",e.style.zIndex="1001",document.body.appendChild(e),setTimeout(()=>{document.body.removeChild(e)},i)}setScreenshareButtonEnabled(t){this.screenshareBtn.disabled=!t,this.screenshareBtn.style.opacity=t?"1":"0.5",this.screenshareBtn.textContent=t?"Start Screen Sharing":"Sharing..."}}class v{constructor(t){this.audioData=null,this.program=null,this.animationFrameId=null,this.lastFrameTime=0,this.fps=0,this.demoMode=!1,this.audioContext=null,this.analyser=null,this.audioStream=null,console.log("QuantumSynth constructor called"),this.canvas=t,this.ui=new y,this.resizeCanvas();try{if(this.gl=t.getContext("webgl2")||t.getContext("webgl"),!this.gl){console.error("WebGL not supported"),this.ui.updateStatus("WebGL not supported - Using 2D fallback"),this.setup2DFallback();return}console.log("WebGL context created successfully"),this.setupShaders()}catch(i){console.error("QuantumSynth initialization failed:",i),this.ui.updateStatus("WebGL initialization failed - Using 2D fallback"),this.setup2DFallback()}this.setupEventListeners()}setupEventListeners(){window.addEventListener("resize",()=>this.resizeCanvas()),window.addEventListener("demoMode",()=>this.toggleDemoMode()),window.addEventListener("startScreenshare",()=>this.startScreenSharing())}async startScreenSharing(){this.ui.setScreenshareButtonEnabled(!1),this.ui.updateStatus("Requesting screen sharing..."),this.ui.updateConnectionStatus(!1,"Status: Requesting permissions");try{this.audioStream=await navigator.mediaDevices.getDisplayMedia({video:!0,audio:!0}),this.ui.updateStatus("Screen sharing active"),this.ui.updateConnectionStatus(!0,"Status: Screen sharing active"),this.ui.showNotification("Screen sharing started successfully"),this.setupAudioAnalysis(),this.audioStream.getVideoTracks()[0].onended=()=>{this.ui.updateStatus("Screen sharing ended"),this.ui.updateConnectionStatus(!1,"Status: Sharing ended"),this.ui.setScreenshareButtonEnabled(!0),this.ui.showNotification("Screen sharing ended"),this.cleanupAudio()}}catch(t){console.error("Screen sharing failed:",t),this.ui.updateStatus("Screen sharing failed"),this.ui.updateConnectionStatus(!1,"Status: Permission denied"),this.ui.setScreenshareButtonEnabled(!0),this.ui.showNotification("Screen sharing failed or was cancelled",5e3),this.demoMode=!0,this.simulateAudioData()}}setupAudioAnalysis(){if(this.audioStream)try{this.audioContext=new AudioContext,this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=256,this.audioContext.createMediaStreamSource(this.audioStream).connect(this.analyser),this.processAudio()}catch(t){console.error("Audio analysis setup failed:",t),this.ui.updateConnectionStatus(!1,"Status: Audio processing failed"),this.demoMode=!0,this.simulateAudioData()}}processAudio(){if(!this.analyser)return;const t=new Uint8Array(this.analyser.frequencyBinCount),i=()=>{this.analyser.getByteFrequencyData(t),this.updateAudioData(t),requestAnimationFrame(i)};i()}cleanupAudio(){this.audioContext&&(this.audioContext.close(),this.audioContext=null),this.analyser=null,this.audioStream=null}toggleDemoMode(){this.demoMode=!this.demoMode,this.ui.showNotification(this.demoMode?"Demo mode activated":"Demo mode deactivated"),this.demoMode?(this.ui.updateStatus("Demo mode active"),this.ui.updateConnectionStatus(!0,"Status: Demo mode"),this.simulateAudioData()):(this.ui.updateStatus("Ready to start screen sharing"),this.ui.updateConnectionStatus(!1,"Status: Waiting for user action"))}resizeCanvas(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,console.log("Canvas resized to:",this.canvas.width,"x",this.canvas.height),this.gl&&this.gl.viewport(0,0,this.canvas.width,this.canvas.height)}setup2DFallback(){console.log("Setting up 2D fallback renderer");const t=this.canvas.getContext("2d");t&&(t.fillStyle="#000",t.fillRect(0,0,this.canvas.width,this.canvas.height),t.fillStyle="#0f0",t.font="16px Arial",t.fillText("WebGL not available - Using 2D fallback",20,40))}initialize(){console.log("QuantumSynth initialized"),this.startRenderLoop(),this.ui.updateStatus("Ready to start screen sharing")}simulateAudioData(){if(this.demoMode){const t=performance.now()/1e3,i=new Uint8Array(256);for(let e=0;e<256;e++){const n=Math.sin(t*2+e/10)*.5+.5;i[e]=Math.floor(n*255)}this.updateAudioData(i)}}startRenderLoop(){let t=performance.now(),i=0;const e=()=>{const n=performance.now(),o=n-t;this.render(),i++,o>=1e3&&(this.fps=i,this.ui.updateFPS(this.fps),i=0,t=n),this.demoMode&&this.simulateAudioData(),this.animationFrameId=requestAnimationFrame(e)};e()}stopRenderLoop(){this.animationFrameId&&(cancelAnimationFrame(this.animationFrameId),this.animationFrameId=null)}setupShaders(){if(!this.gl)return;console.log("Setting up shaders");const t=`
            attribute vec4 aVertexPosition;
            varying vec2 vTexCoord;
            void main() {
                gl_Position = aVertexPosition;
                vTexCoord = aVertexPosition.xy * 0.5 + 0.5;
                gl_PointSize = 3.0;
            }
        `,i=`
            precision mediump float;
            varying vec2 vTexCoord;
            uniform float uTime;
            
            void main() {
                // Create a dynamic visualization based on time
                vec2 uv = vTexCoord;
                float time = uTime * 0.5;
                
                // Create moving waves
                float wave1 = sin(uv.x * 10.0 + time) * 0.1;
                float wave2 = cos(uv.y * 8.0 + time * 1.3) * 0.1;
                
                // Combine waves
                vec3 color = vec3(
                    abs(sin(time + uv.x * 2.0)) * 0.8,
                    abs(cos(time + uv.y * 2.0)) * 0.6,
                    abs(sin(time * 1.5 + uv.x * 3.0)) * 0.7
                );
                
                gl_FragColor = vec4(color, 1.0);
            }
        `,e=this.createShader(this.gl.VERTEX_SHADER,t),n=this.createShader(this.gl.FRAGMENT_SHADER,i);if(!e||!n){console.error("Failed to create shaders");return}if(this.program=this.gl.createProgram(),!this.program){console.error("Failed to create program");return}if(this.gl.attachShader(this.program,e),this.gl.attachShader(this.program,n),this.gl.linkProgram(this.program),!this.gl.getProgramParameter(this.program,this.gl.LINK_STATUS)){console.error("Failed to link program:",this.gl.getProgramInfoLog(this.program));return}const o=new Float32Array([-1,-1,1,-1,-1,1,1,1]),a=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,a),this.gl.bufferData(this.gl.ARRAY_BUFFER,o,this.gl.STATIC_DRAW);const r=this.gl.getAttribLocation(this.program,"aVertexPosition");this.gl.vertexAttribPointer(r,2,this.gl.FLOAT,!1,0,0),this.gl.enableVertexAttribArray(r),console.log("Shaders compiled successfully")}createShader(t,i){if(!this.gl)return null;const e=this.gl.createShader(t);return e?(this.gl.shaderSource(e,i),this.gl.compileShader(e),this.gl.getShaderParameter(e,this.gl.COMPILE_STATUS)?e:(console.error("Shader compilation error:",this.gl.getShaderInfoLog(e)),this.gl.deleteShader(e),null)):null}updateAudioData(t){this.audioData=t}render(){if(!this.gl||!this.program){this.render2DFallback();return}this.gl.clearColor(0,0,0,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.gl.useProgram(this.program);const t=this.gl.getUniformLocation(this.program,"uTime");this.gl.uniform1f(t,performance.now()/1e3),this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4)}render2DFallback(){const t=this.canvas.getContext("2d");if(t)if(t.fillStyle="#000",t.fillRect(0,0,this.canvas.width,this.canvas.height),this.audioData){const i=this.canvas.width/this.audioData.length;for(let e=0;e<this.audioData.length;e++){const o=this.audioData[e]/255*this.canvas.height/2,a=e/this.audioData.length*360;t.fillStyle=`hsl(${a}, 80%, 60%)`,t.fillRect(e*i,this.canvas.height-o,i-1,o)}}else t.fillStyle="#fff",t.font="16px Arial",t.textAlign="center",t.fillText("Start screen sharing to begin visualization",this.canvas.width/2,this.canvas.height/2)}disconnect(){this.stopRenderLoop(),this.cleanupAudio()}}try{S(()=>Promise.resolve({}),__vite__mapDeps([0]))}catch{console.log("No stylesheet found, using default styles")}document.addEventListener("DOMContentLoaded",()=>{console.log("Initializing QuantumSynth...");let s=document.getElementById("quantumCanvas");s||(console.log("Canvas not found, creating one..."),s=document.createElement("canvas"),s.id="quantumCanvas",s.style.position="fixed",s.style.top="0",s.style.left="0",s.style.width="100%",s.style.height="100%",document.body.appendChild(s));const t=new v(s);t.initialize(),window.addEventListener("beforeunload",()=>{t.disconnect()})});window.addEventListener("resize",()=>{const s=document.getElementById("quantumCanvas");s&&(s.width=window.innerWidth,s.height=window.innerHeight)});
